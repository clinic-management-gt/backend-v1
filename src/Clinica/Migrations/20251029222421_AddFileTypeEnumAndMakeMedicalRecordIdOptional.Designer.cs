// <auto-generated />
using System;
using Clinica.Models.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Clinica.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251029222421_AddFileTypeEnumAndMakeMedicalRecordIdOptional")]
    partial class AddFileTypeEnumAndMakeMedicalRecordIdOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "appointment_status_enum", new[] { "Confirmado", "Pendiente", "Completado", "Cancelado", "Espera" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "file_type_enum", new[] { "receta", "hoja_de_informacion", "examen", "laboratorio", "radiografia", "resultado_de_laboratorio", "consentimiento", "otro" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "log_action_enum", new[] { "INSERT", "UPDATE", "DELETE" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "treatment_status_enum", new[] { "Terminado", "No Terminado" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Clinica.Models.EntityFramework.Alergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlergyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("alergy_code");

                    b.Property<string>("AlergyDescription")
                        .HasColumnType("text")
                        .HasColumnName("alergy_description");

                    b.HasKey("Id")
                        .HasName("alergies_pkey");

                    b.ToTable("alergies", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("appointment_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<AppointmentStatus>("Status")
                        .HasColumnType("appointment_status_enum")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("appointments_pkey");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.BloodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("blood_types_pkey");

                    b.ToTable("blood_types", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DiseaseCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("disease_code");

                    b.Property<string>("DiseaseDescription")
                        .HasColumnType("text")
                        .HasColumnName("disease_description");

                    b.HasKey("Id")
                        .HasName("chronic_diseases_pkey");

                    b.ToTable("chronic_diseases", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("contacts_pkey");

                    b.HasIndex("PatientId");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.ContactEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<int>("EmailId")
                        .HasColumnType("integer")
                        .HasColumnName("email_id");

                    b.HasKey("Id")
                        .HasName("contactemails_pkey");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmailId");

                    b.ToTable("contactemails", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("diagnosis_date");

                    b.HasKey("Id")
                        .HasName("diagnosis_pkey");

                    b.HasIndex("AppointmentId");

                    b.ToTable("diagnosis", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("emails_pkey");

                    b.ToTable("emails", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("exams_pkey");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at");

                    b.Property<string>("NewData")
                        .HasColumnType("json")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasColumnType("json")
                        .HasColumnName("old_data");

                    b.Property<int>("RecordId")
                        .HasColumnType("integer")
                        .HasColumnName("record_id");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("table_name");

                    b.HasKey("Id")
                        .HasName("history_pkey");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverageDetails")
                        .HasColumnType("text")
                        .HasColumnName("coverage_details");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("policy_number");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("provider_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("insurance_pkey");

                    b.ToTable("insurance", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at");

                    b.Property<string>("NewData")
                        .HasColumnType("json")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasColumnType("json")
                        .HasColumnName("old_data");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("table_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("logs_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("text")
                        .HasColumnName("family_history");

                    b.Property<decimal?>("Height")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("height");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("medical_records_pkey");

                    b.HasIndex("PatientId");

                    b.ToTable("medical_records", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("provider");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("medicines_pkey");

                    b.ToTable("medicines", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("modules_pkey");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("blood_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<DateOnly>("LastVisit")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("PatientTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("patients_pkey");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("PatientTypeId");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientAlergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlergyId")
                        .HasColumnType("integer")
                        .HasColumnName("alergy_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("patient_alergies_pkey");

                    b.HasIndex("AlergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_alergies", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChronicDiseaseId")
                        .HasColumnType("integer")
                        .HasColumnName("chronic_disease_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("patient_chronic_diseases_pkey");

                    b.HasIndex("ChronicDiseaseId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_chronic_diseases", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("integer")
                        .HasColumnName("medical_record_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Type")
                        .HasColumnType("file_type_enum")
                        .HasColumnName("type");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("uploaded_at");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("integer")
                        .HasColumnName("uploaded_by");

                    b.HasKey("Id")
                        .HasName("patient_documents_pkey");

                    b.HasIndex("PatientId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("patient_documents", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer")
                        .HasColumnName("exam_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("ResultFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("result_file_path");

                    b.Property<string>("ResultText")
                        .HasColumnType("text")
                        .HasColumnName("result_text");

                    b.HasKey("Id")
                        .HasName("patient_exams_pkey");

                    b.HasIndex("ExamId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_exams", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("integer")
                        .HasColumnName("insurance_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("patient_insurance_pkey");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("PatientId");

                    b.ToTable("patient_insurance", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("patient_types_pkey");

                    b.ToTable("patient_types", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientVaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeAtApplication")
                        .HasColumnType("integer")
                        .HasColumnName("age_at_application");

                    b.Property<DateOnly?>("ApplicationDate")
                        .HasColumnType("date")
                        .HasColumnName("application_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Dosis")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("dosis");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<int>("VaccineId")
                        .HasColumnType("integer")
                        .HasColumnName("vaccine_id");

                    b.HasKey("Id")
                        .HasName("patient_vaccines_pkey");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccineId");

                    b.ToTable("patient_vaccines", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PendingPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_number");

                    b.Property<string>("ContactType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pending_patients_pkey");

                    b.ToTable("pending_patients", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PendingPatientContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("PendingPatientId")
                        .HasColumnType("integer")
                        .HasColumnName("pending_patient_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PendingPatientId");

                    b.ToTable("pending_patient_contacts");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PendingPatientPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("PendingPatientContactId")
                        .HasColumnType("integer")
                        .HasColumnName("pending_patient_contact_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PendingPatientContactId");

                    b.ToTable("pending_patient_phones");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CanDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("can_delete");

                    b.Property<bool?>("CanEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("can_edit");

                    b.Property<bool?>("CanView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("can_view");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("permissions_pkey");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("phones_pkey");

                    b.HasIndex("ContactId");

                    b.ToTable("phones", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Prescription")
                        .HasColumnType("text")
                        .HasColumnName("prescription");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("integer")
                        .HasColumnName("treatment_id");

                    b.HasKey("Id")
                        .HasName("recipes_pkey");

                    b.HasIndex("TreatmentId");

                    b.ToTable("recipes", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CanEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("can_edit");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DbHost")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("db_host");

                    b.Property<string>("DbName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("db_name");

                    b.Property<string>("DbPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("db_password");

                    b.Property<string>("DbUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("db_user");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("tenants_pkey");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dosis");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("duration");

                    b.Property<string>("Frequency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("frequency");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer")
                        .HasColumnName("medicine_id");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("treatments_pkey");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MedicineId");

                    b.ToTable("treatments", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("vaccines_pkey");

                    b.ToTable("vaccines", (string)null);
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Appointment", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.User", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("appointments_doctor_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("appointments_patient_id_fkey");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Contact", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany("Contacts")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("contacts_patient_id_fkey");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.ContactEmail", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Contact", "Contact")
                        .WithMany("ContactEmails")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contactemails_contactid_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Email", "Email")
                        .WithMany("ContactEmails")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contactemails_emailid_fkey");

                    b.Navigation("Contact");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Diagnosis", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Appointment", "Appointment")
                        .WithMany("Diagnoses")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("diagnosis_appointment_id_fkey");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Log", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("logs_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.MedicalRecord", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("medical_records_patient_id_fkey");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Patient", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.BloodType", "BloodType")
                        .WithMany("Patients")
                        .HasForeignKey("BloodTypeId")
                        .IsRequired()
                        .HasConstraintName("patients_blood_type_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.PatientType", "PatientType")
                        .WithMany("Patients")
                        .HasForeignKey("PatientTypeId")
                        .IsRequired()
                        .HasConstraintName("patients_patient_type_id_fkey");

                    b.Navigation("BloodType");

                    b.Navigation("PatientType");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientAlergy", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Alergy", "Alergy")
                        .WithMany("PatientAlergies")
                        .HasForeignKey("AlergyId")
                        .IsRequired()
                        .HasConstraintName("patient_alergies_alergy_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany("PatientAlergies")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patient_alergies_patient_id_fkey");

                    b.Navigation("Alergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientChronicDisease", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.ChronicDisease", "ChronicDisease")
                        .WithMany("PatientChronicDiseases")
                        .HasForeignKey("ChronicDiseaseId")
                        .IsRequired()
                        .HasConstraintName("patient_chronic_diseases_chronic_disease_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany("PatientChronicDiseases")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patient_chronic_diseases_patient_id_fkey");

                    b.Navigation("ChronicDisease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientDocument", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patient_documents_patient_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("patient_documents_uploaded_by_fkey");

                    b.Navigation("Patient");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientExam", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Exam", "Exam")
                        .WithMany("PatientExams")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("patient_exams_exam_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany("PatientExams")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patient_exams_patient_id_fkey");

                    b.Navigation("Exam");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientInsurance", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Insurance", "Insurance")
                        .WithMany("PatientInsurances")
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("patient_insurance_insurance_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany("PatientInsurances")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patient_insurance_patient_id_fkey");

                    b.Navigation("Insurance");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientVaccine", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Patient", "Patient")
                        .WithMany("PatientVaccines")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patient_vaccines_patient_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Vaccine", "Vaccine")
                        .WithMany("PatientVaccines")
                        .HasForeignKey("VaccineId")
                        .IsRequired()
                        .HasConstraintName("patient_vaccines_vaccine_id_fkey");

                    b.Navigation("Patient");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PendingPatientContact", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.PendingPatient", "PendingPatient")
                        .WithMany("PendingPatientContacts")
                        .HasForeignKey("PendingPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PendingPatient");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PendingPatientPhone", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.PendingPatientContact", "PendingPatientContact")
                        .WithMany("PendingPatientPhones")
                        .HasForeignKey("PendingPatientContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PendingPatientContact");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Permission", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("permissions_module_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("permissions_role_id_fkey");

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Phone", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Contact", "Contact")
                        .WithMany("Phones")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("phones_contact_id_fkey");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Recipe", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Treatment", "Treatment")
                        .WithMany("Recipes")
                        .HasForeignKey("TreatmentId")
                        .IsRequired()
                        .HasConstraintName("recipes_treatment_id_fkey");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Treatment", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Appointment", "Appointment")
                        .WithMany("Treatments")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("treatments_appointment_id_fkey");

                    b.HasOne("Clinica.Models.EntityFramework.Medicine", "Medicine")
                        .WithMany("Treatments")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("treatments_medicine_id_fkey");

                    b.Navigation("Appointment");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.User", b =>
                {
                    b.HasOne("Clinica.Models.EntityFramework.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("users_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Alergy", b =>
                {
                    b.Navigation("PatientAlergies");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Appointment", b =>
                {
                    b.Navigation("Diagnoses");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.BloodType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.ChronicDisease", b =>
                {
                    b.Navigation("PatientChronicDiseases");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Contact", b =>
                {
                    b.Navigation("ContactEmails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Email", b =>
                {
                    b.Navigation("ContactEmails");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Exam", b =>
                {
                    b.Navigation("PatientExams");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Insurance", b =>
                {
                    b.Navigation("PatientInsurances");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Medicine", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Module", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Contacts");

                    b.Navigation("MedicalRecords");

                    b.Navigation("PatientAlergies");

                    b.Navigation("PatientChronicDiseases");

                    b.Navigation("PatientExams");

                    b.Navigation("PatientInsurances");

                    b.Navigation("PatientVaccines");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PatientType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PendingPatient", b =>
                {
                    b.Navigation("PendingPatientContacts");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.PendingPatientContact", b =>
                {
                    b.Navigation("PendingPatientPhones");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Treatment", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Clinica.Models.EntityFramework.Vaccine", b =>
                {
                    b.Navigation("PatientVaccines");
                });
#pragma warning restore 612, 618
        }
    }
}
